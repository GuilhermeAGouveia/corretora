// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id        String     @id @default(cuid())
  email     String     @unique
  firstName String
  lastName  String
  password  String
  birthdate DateTime
  address   String
  city      String
  state     String
  cep       String
  phones    Telefone[]
  createdAt DateTime   @default(now())
  Locador   Locador?
  Locatario Locatario?
}

model Telefone {
  numero   String
  idPessoa String

  pessoa Pessoa @relation(fields: [idPessoa], references: [id], onDelete: Cascade)

  @@id([numero, idPessoa], name: "idTelefone")
}

model Locador {
  cod_lcd    String     @id
  is_partner Boolean    @default(false)
  pessoa     Pessoa     @relation(fields: [cod_lcd], references: [id], onDelete: Cascade)
  imovel     Imovel[]
  Contrato   Contrato[]
}

model Locatario {
  cod_lct    String      @id
  pessoa     Pessoa      @relation(fields: [cod_lct], references: [id], onDelete: Cascade)
  associados Associado[]
  contrato   Contrato[]
}

model Imovel {
  cod_imv String     @id @default(cuid())
  cod_lcd String // dono (Locador)        
  type    ImovelType @default(CASA)

  // Endereço

  address  String
  cep      String
  district String
  city     String
  state    String
  nApto    Int?

  // Descrição do imóvel

  hasGarage   Boolean        @default(false)
  hasGarden   Boolean        @default(false)
  hasSuite    Boolean        @default(false)
  nRooms      Int            @default(0)
  nBathrooms  Int            @default(0)
  area        Float
  isFurnished LevelFurnished @default(NONE)
  supDescribe String? // Descrição complementar

  price       Float    @default(0)
  mensalidade Float    @default(0)
  createdAt   DateTime @default(now())

  locador      Locador         @relation(fields: [cod_lcd], references: [cod_lcd], onDelete: Restrict)
  regrasImovel Regras_Imovel[]
  contratos    Contrato[]
  images       Image[]
}

enum LevelFurnished {
  FULL
  SEMI
  NONE
}

enum ImovelType {
  CASA
  APTO
  COMERCIO
}

model Regras_Imovel {
  cod_imv  String
  regra    String
  imovel   Imovel        @relation(fields: [cod_imv], references: [cod_imv], onDelete: Cascade)
  priority Rule_Priority @default(NORMAL)

  @@id([cod_imv, regra], name: "idRegra")
}

enum Rule_Priority {
  IMPORTANT
  DESIRABLE // Desejável
  NORMAL
}

model Associado {
  name      String
  cod_lct   String
  birthdate DateTime?
  tipo      AssociadoType @default(OUTRO)
  locatario Locatario     @relation(fields: [cod_lct], references: [cod_lct], onDelete: Cascade)

  @@id([name, cod_lct], name: "idAssociado")
}

enum AssociadoType {
  CONJUGE
  FILHO
  IRMAO
  PAI
  MAE
  OUTRO
}

model Contrato {
  cod_imv String
  cod_lct String
  cod_lcd String

  dateInit DateTime?
  dateEnd  DateTime?

  type ContratoType @default(LOCACAO)

  createdAt DateTime @default(now())

  imovel    Imovel    @relation(fields: [cod_imv], references: [cod_imv], onDelete: Restrict)
  locatario Locatario @relation(fields: [cod_lct], references: [cod_lct], onDelete: Restrict)
  locador   Locador   @relation(fields: [cod_lcd], references: [cod_lcd], onDelete: Restrict)

  @@id([cod_imv, cod_lct], name: "idContrato")
}

enum ContratoType {
  LOCACAO
  VENDA
}

model Image {
  key          String   @id
  idOwner      String
  size         Int
  originalname String
  url          String
  createdAt    DateTime @default(now())
  imovel       Imovel   @relation(fields: [idOwner], references: [cod_imv], onDelete: Cascade)
}
